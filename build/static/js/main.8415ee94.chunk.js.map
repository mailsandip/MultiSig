{"version":3,"sources":["utils.js","Header.js","NewTransfer.js","TransferList.js","App.js","index.js"],"names":["Web3","require","getWalletContract","web3","a","eth","net","getId","currentNetworkId","deployedNetwork","MultiSigWallet","networks","Contract","abi","address","Header","approvers","quorum","join","NewTransfer","createTransfer","useState","undefined","transfer","setTransfer","updateTrasfer","e","field","value","target","onSubmit","preventDefault","submit","htmlFor","id","type","onChange","TransferList","transfers","approveTransfer","map","amount","to","noOfApprovals","onClick","isTxDone","App","setWeb3","accounts","setAccounts","walletContract","setWalletContract","setApprovers","setQuorum","setTransfers","useEffect","init","Promise","resolve","reject","detectEthereumProvider","provider","request","method","window","ethereum","error","getAccounts","methods","getApprovers","call","getTransactions","length","send","from","transferId","approveTx","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8415ee94.chunk.js","sourcesContent":["import MultiSigWallet from './contracts/MultiSigWallet.json';\r\nimport detectEthereumProvider from '@metamask/detect-provider';\r\n\r\n\r\nconst Web3 = require('web3');\r\n\r\nconst getWeb3 = function() {\r\n    //return new Web3('http://127.0.0.1:9545');\r\n \r\n        return new Promise(async (resolve, reject) => {\r\n            const provider = await detectEthereumProvider();\r\n            if(provider){\r\n                //const web3 = new Web3(window.ethereum);\r\n                await provider.request({ method: 'eth_requestAccounts' });\r\n                try{\r\n                    const web3 = new Web3(window.ethereum);\r\n                    resolve(web3);                    \r\n                }catch(error){\r\n                    reject(error);\r\n                }\r\n            }else if(window.web3){\r\n                resolve(window.web3);\r\n            }else{\r\n                reject('Please install Metamask');\r\n            }\r\n  \r\n    });\r\n};\r\n\r\nconst getWalletContract = async (web3)  => {\r\n    var currentNetworkId = await web3.eth.net.getId();\r\n    var deployedNetwork = MultiSigWallet.networks[currentNetworkId];\r\n    return new web3.eth.Contract(\r\n        MultiSigWallet.abi,\r\n        deployedNetwork && deployedNetwork.address\r\n    );\r\n};\r\n\r\nexport{ getWeb3 , getWalletContract };","import React from \"react\";\r\n\r\nfunction Header({approvers,quorum}) {\r\n    return(\r\n        <header>\r\n            <ul>\r\n                <li>Approvers: {approvers.join(',')}</li>\r\n                <li>Quorum:{quorum}</li>\r\n            </ul>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import React, {useState} from \"react\";\r\n\r\nfunction NewTransfer({createTransfer}) {\r\n    const [transfer, setTransfer] = useState(undefined);\r\n\r\n    const updateTrasfer = (e,field) =>{\r\n        const value = e.target.value;\r\n        setTransfer({...transfer,[field]:value});\r\n    };\r\n\r\n    const submit = (e) => {\r\n        e.preventDefault();\r\n        createTransfer(transfer);\r\n    }\r\n\r\n\r\n    return(\r\n        <div>\r\n            <h2>Create Transfer </h2>\r\n            <form onSubmit={e =>{submit(e)}}>\r\n                <label htmlFor=\"to\">To</label>\r\n                <input id=\"to\" type=\"text\" onChange={(e)=>updateTrasfer(e,'to')}\r\n                />\r\n                <label htmlFor=\"amount\">Amount</label>\r\n                <input id=\"amount\" type=\"text\" onChange={(e)=>updateTrasfer(e,'amount')}\r\n                />\r\n                <button>Submit</button>\r\n            </form>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default NewTransfer;","import React from \"react\";\r\n\r\nfunction TransferList({transfers,approveTransfer}) {\r\n    return(\r\n        <div>\r\n            <table>\r\n                <h2>Transfers</h2>\r\n                <theader>\r\n                    <tr>\r\n                        <th>Id</th>\r\n                        <th>Amount</th>\r\n                        <th>To</th>\r\n                        <th>Approvals</th>\r\n                        <th>Sent</th>\r\n                    </tr>\r\n\r\n                </theader>\r\n                <tbody>\r\n                    {transfers.map(transfer => (\r\n                        <tr key={transfer.id}>\r\n                            <td>{transfer.id}</td>\r\n                            <td>{transfer.amount}</td>\r\n                            <td>{transfer.to}</td>\r\n                            <td>\r\n                                {transfer.noOfApprovals}\r\n                                <button onClick={() => approveTransfer(transfer.id)}>Approve</button>\r\n                            </td>\r\n                            <td>{transfer.isTxDone ? 'Yes' : 'No'}</td>\r\n                        </tr>            \r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TransferList;","import React, {useState, useEffect} from 'react';\nimport {getWeb3, getWalletContract} from './utils.js';\nimport Header from './Header.js';\nimport NewTransfer from './NewTransfer.js';\nimport TransferList from './TransferList.js';\n\nfunction App() {\n  const [web3, setWeb3] = useState(undefined);\n  const[accounts,setAccounts] = useState(undefined);\n  const [walletContract,setWalletContract] = useState(undefined);\n  const [approvers, setApprovers] = useState([]);\n  const[quorum, setQuorum] = useState(undefined);\n  const[transfers,setTransfers] = useState([]);\n\nuseEffect(() => {\n  const init = async () => {\n    const web3 = await getWeb3();\n    const accounts = await web3.eth.getAccounts();\n    const walletContract = await getWalletContract(web3);\n    const approvers = await walletContract.methods.getApprovers().call();\n    const quorum = await walletContract.methods.quorum().call();\n    const transfers = await walletContract.methods.getTransactions().call();\n    setWeb3(web3);\n    setAccounts(accounts);\n    setWalletContract(walletContract);\n    setApprovers(approvers);\n    setQuorum(quorum);\n    setTransfers(transfers);    \n  };\n  init();\n},[]);\n\n  const createTransfer = (transfer) => {\n    walletContract.methods.createTransfer(transfer.to,transfer.amount).send({from:accounts[0]});\n  }\n\n  const approveTransfer = (transferId)=> {\n    walletContract.methods.approveTx(transferId).send({from:accounts[0]});\n  }\n\n\n  if(typeof web3 ==='undefined' || typeof accounts === 'undefined' || typeof walletContract === 'undefined'\n    || typeof quorum === 'undefined' || approvers.length === 0) {\n    return(<div>Loading....</div>)\n  } \n    return (\n      <div>\n        MultiSig Wallet\n        <Header approvers={approvers} quorum={quorum} />\n        <NewTransfer createTransfer={createTransfer} />\n        <TransferList transfers={transfers} approveTransfer={approveTransfer}/>\n      </div>\n    );\n  \n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}